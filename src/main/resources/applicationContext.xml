<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.0.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
               http://www.springframework.org/schema/mvc
        		http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!--引入配置属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<context:annotation-config />
	<!-- 启动 annotation事务，只能用于springMVC，用于配置springMVC的注解驱动 -->
	<mvc:annotation-driven />
	<!--自动扫描含有@Service将其注入为bean -->
	<context:component-scan base-package="com.web.**.service" />
	<context:component-scan base-package="com.web.**.controller" />
	<!-- 配置数据源 使用的是Druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<!-- <property name="DriverClassName" value="com.mysql.jdbc.Driver" /> 
			JDBC连接串 <property name="url" value="jdbc:mysql://127.0.0.1:3306/website?zeroDateTimeBehavior=convertToNull" 
			/> 数据库用户名称 <property name="username" value="root" /> 数据库密码 <property name="password" 
			value="root" /> -->
		<property name="filters" value="stat" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="33" />

		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- <property name="validationQuery" value="${validationQuery}" /> <property 
			name="testOnBorrow" value="false" /> <property name="testOnReturn" value="false" 
			/> <property name="testWhileIdle" value="true" /> -->

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="mergeStat" /> -->
	</bean>

	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="DataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath:com.web.supervisor.mapper/*.xml</value>
			</array>
		</property>
		<!-- spring-mybatis分页插件配置 -->
		<property name="typeAliasesPackage" value="com.web.supervisor.entity" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
							supportMethodsArguments=true
							returnPageInfo=check
							params=count=countSql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
		
	<!--  mybatis配置文件和 DAO的位置，扫描com.web.supervisor.controller.*目录下，所有继承BaseMapper的Mapper接口 -->   
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.web.supervisor.mapper"/> 
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>       
    </bean>

 
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<aop:aspectj-autoproxy />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- JS,CSS资源不被过滤 -->
	<mvc:resources location="/resources/" mapping="/resources/**" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config>
		<aop:pointcut id="pointcut"
			expression="execution(public * com.web.supervisor.service.*.impl.*Impl.*(..))" />
		<aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice" />
	</aop:config>
</beans>